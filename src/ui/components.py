"""UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
import streamlit as st
import os
import hashlib
from typing import List, Dict, Any
from src.constants import REPORT_ICONS
from src.ui.utils import render_response_with_latex


def render_header():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ —Å –∏–∫–æ–Ω–∫–æ–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º.
    """
    st.markdown("""
    <div style="display: flex; align-items: center; margin-bottom: 2rem;">
        <div style="background: #ff6b6b; border-radius: 8px; padding: 8px; margin-right: 12px;">
            <span style="color: white; font-size: 20px;">ü§ñ</span>
        </div>
        <h1 style="margin: 0; color: #333;">OIS-GPT</h1>
    </div>
    """, unsafe_allow_html=True)


def render_chat_history():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ `st.session_state.messages`, –≤–∫–ª—é—á–∞—è:
    - –í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –û—Ç–≤–µ—Ç—ã –ò–ò —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    - –ì—Ä–∞—Ñ–∏–∫–∏, –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            if message["role"] == "assistant" and "summary_type" in message:
                st.markdown(f"**{message['summary_type']}**")

            if message["role"] == "assistant":
                render_response_with_latex(message["content"])
            else:
                st.markdown(message["content"])

            if message["role"] == "assistant" and "plot_path" in message and message["plot_path"]:
                try:
                    if os.path.exists(message["plot_path"]):
                        st.image(message["plot_path"], caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
                except:
                    pass

            if message["role"] == "assistant" and "analysis_code" in message and message["analysis_code"]:
                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞"):
                    st.code(message["analysis_code"], language="python")

            if message["role"] == "assistant" and "analysis_result" in message and message["analysis_result"]:
                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"):
                    st.text(message["analysis_result"])


def render_report_selector():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:
    - –°–ø–∏—Å–æ–∫ —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    - –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    - –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ç—á–µ—Ç—ã, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è `process_report_selection`.
    """
    st.markdown("---")

    current_state = st.session_state.current_state
    report_count = len(current_state["report_options"])

    if report_count == 0:
        st.markdown("### ‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        st.markdown("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Elasticsearch –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        st.markdown("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

        if st.button("üîÑ –ó–∞–¥–∞—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å"):
            st.session_state.waiting_for_report_selection = False
            st.session_state.current_state = None
            st.session_state.current_graph = None
            st.rerun()
        return

    if current_state.get("route_decision") == "elasticsearch_based":
        st.markdown(f"### üìä –ù–∞–π–¥–µ–Ω–æ {report_count} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤:")
        st.markdown("*–û—Ç—á–µ—Ç—ã —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É*")
    elif current_state.get("route_decision") == "all_reports_fallback":
        st.markdown(f"### üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        st.markdown("*–¢–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:*")
    else:
        st.markdown(f"### üìä –ù–∞–π–¥–µ–Ω–æ {report_count} –æ—Ç—á–µ—Ç–æ–≤:")

    selected_options = []

    if report_count == 1:
        col1, col2, col3 = st.columns([1, 2, 1])
        columns = [col2]
    elif report_count == 2:
        col1, col2 = st.columns(2)
        columns = [col1, col2]
    else:
        col1, col2 = st.columns(2)
        columns = [col1, col2]

    for i, option in enumerate(current_state["report_options"]):
        icon = REPORT_ICONS.get(option["id"], "üìä")
        target_col = columns[i % len(columns)]

        with target_col:
            relevance_indicator = ""
            if i == 0:
                relevance_indicator = " 1Ô∏è‚É£"
            elif i == 1:
                relevance_indicator = " 2Ô∏è‚É£"
            elif i == 2:
                relevance_indicator = " 3Ô∏è‚É£"

            state_hash = hashlib.md5(str(current_state["report_options"]).encode()).hexdigest()[:8]
            checkbox_key = f"report_check_{option['id']}_{i}_{state_hash}"
            checkbox_label = f"{icon} {option['title']}{relevance_indicator}"

            if st.checkbox(checkbox_label, key=checkbox_key):
                selected_options.append(option["id"])

            st.caption(option["description"])

            if i < len(current_state["report_options"]) - 1:
                st.markdown("")

    if st.button("üöÄ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", disabled=len(selected_options) == 0):
        st.session_state.selected_reports = selected_options
        st.session_state.process_selection = True

    if st.session_state.get("process_selection", False) and st.session_state.selected_reports:
        process_report_selection()


def process_report_selection():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç—á–µ—Ç—ã:
    - –î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —á–∞—Å—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    - –í—ã–ø–æ–ª–Ω—è–µ—Ç –≥—Ä–∞—Ñ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
    
    –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞.
    """
    with st.chat_message("assistant"):
        from src.services import AIService
        ai_service = AIService()

        with st.spinner("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é –µ–≥–æ –ø–æ–¥ –∫–∞–∂–¥—ã–π –æ—Ç—á–µ—Ç..."):
            original_query = st.session_state.current_state.get("user_input", "")
            specific_queries = ai_service.decompose_query_for_reports(
                original_query,
                st.session_state.selected_reports
            )

        st.markdown("### üîç –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á–µ—Ç–∞:")
        for i, report_id in enumerate(st.session_state.selected_reports, 1):
            from src.models import PREDEFINED_REPORTS
            report_name = next((opt["title"] for opt in PREDEFINED_REPORTS if opt["id"] == report_id), report_id)
            specific_query = specific_queries.get(report_id, original_query)

            if specific_query != original_query:
                st.markdown(f"**{i}. {report_name}:** _{specific_query}_ ‚ú®")
            else:
                st.markdown(f"**{i}. {report_name}:** _{specific_query}_")

        st.markdown("---")

        all_final_states = []

        for i, report_id in enumerate(st.session_state.selected_reports):
            specific_query = specific_queries.get(report_id, original_query)
            report_name = next((opt["title"] for opt in PREDEFINED_REPORTS if opt["id"] == report_id), report_id)

            with st.spinner(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {report_name} ({i + 1}/{len(st.session_state.selected_reports)})..."):
                report_state = st.session_state.current_state.copy()
                report_state["selected_report"] = report_id
                report_state["waiting_for_selection"] = False
                report_state["user_input"] = specific_query

                graph = st.session_state.current_graph
                final_state = graph.invoke(report_state)

                final_state["original_user_input"] = original_query
                final_state["specific_user_input"] = specific_query
                all_final_states.append(final_state)

        if len(all_final_states) > 1:
            st.markdown("## üéØ –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –æ—Ç—á–µ—Ç–∞–º:")

            combined_summary = ai_service.generate_combined_analysis(
                all_final_states,
                st.session_state.selected_reports,
                original_query
            )
            render_response_with_latex(combined_summary)

            st.session_state.messages.append({
                "role": "assistant",
                "content": combined_summary,
                "summary_type": "–°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                "analysis_code": "",
                "analysis_result": "",
                "plot_path": ""
            })
        else:
            final_state = all_final_states[0]
            display_single_report_result(final_state, ai_service)

        st.session_state.waiting_for_report_selection = False
        st.session_state.current_state = None
        st.session_state.current_graph = None
        st.session_state.process_selection = False
        st.session_state.selected_reports = []


def display_single_report_result(final_state: Dict[str, Any], ai_service):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:
    - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
    - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - –í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç-–∏—Å—Ç–æ—Ä–∏—é
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        final_state (dict): –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        ai_service (AIService): –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    """
    from src.services.queue_service import queue_aware_generation

    session_id = st.session_state.get('session_id', 'default')

    with st.spinner("üí≠ –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç..."):
        final_response = queue_aware_generation(session_id, 'generate_final_response', {
            'state': final_state
        })

    if final_state.get("plot_path") and os.path.exists(final_state["plot_path"]):
        try:
            st.image(final_state["plot_path"], caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {str(e)}")

    render_response_with_latex(final_response)

    st.session_state.messages.append({
        "role": "assistant",
        "content": final_response,
        "summary_type": final_state["summary_type"],
        "analysis_code": final_state.get("analysis_code", ""),
        "analysis_result": final_state.get("analysis_result", ""),
        "plot_path": final_state.get("plot_path", "")
    })


def display_result(final_state: Dict[str, Any]):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ç–∏–ø—É –º–∞—Ä—à—Ä—É—Ç–∞:
    - –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí —Ç–µ–∫—Å—Ç —Å LaTeX
    - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ‚Üí –æ—Ç–≤–µ—Ç –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã ‚Üí –Ω–∏—á–µ–≥–æ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ)
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        final_state (dict): –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞
    """
    if final_state["route_decision"] == "general":
        render_response_with_latex(final_state["response"])

    elif final_state["route_decision"] == "documentation":
        st.markdown("### üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:")
        render_response_with_latex(final_state["response"])

        doc_results = final_state.get("doc_results", [])
        if doc_results:
            with st.expander(f"üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(doc_results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)", expanded=False):
                for i, doc in enumerate(doc_results, 1):
                    st.markdown(f"**–î–æ–∫—É–º–µ–Ω—Ç {i} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {doc['score']:.2f})**")
                    preview = doc['content'][:500] + "..." if len(doc['content']) > 500 else doc['content']
                    st.text(preview)
                    st.markdown("---")

    else:
        return

    st.session_state.messages.append({
        "role": "assistant",
        "content": final_state["response"],
        "summary_type": final_state.get("summary_type", ""),
        "analysis_code": final_state.get("analysis_code", ""),
        "analysis_result": final_state.get("analysis_result", ""),
        "plot_path": final_state.get("plot_path", "")
    })


def cleanup_old_plots(max_files: int = 50):
    """
    –£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ PNG-—Ñ–∞–π–ª—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö —á–∏—Å–ª–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç `max_files`.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        max_files (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤.
    """
    try:
        plot_files = [f for f in os.listdir('.') if f.startswith('plot_') and f.endswith('.png')]

        if len(plot_files) > max_files:
            plot_files.sort(key=lambda x: os.path.getctime(x))
            files_to_delete = plot_files[:-max_files]
            for file_path in files_to_delete:
                try:
                    os.remove(file_path)
                    print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞: {file_path}")
                except:
                    pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤: {str(e)}")