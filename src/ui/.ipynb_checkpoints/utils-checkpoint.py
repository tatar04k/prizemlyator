"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è UI"""
import streamlit as st
import re
import uuid
from src.constants import GREEK_LETTER_MAP, SUPERSCRIPT_MAP


def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    if 'session_id' not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())

    if "messages" not in st.session_state:
        st.session_state.messages = []
        st.session_state.messages.append({
            "role": "assistant",
            "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–æ–π –æ—Ç—Ä–∞—Å–ª–∏. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ –ø–ª–∞–Ω–∞—Ö —Ä–∞–±–æ—Ç—ã, –±—É—Ä–µ–Ω–∏–∏, –∑–∞–º–µ—Ä–Ω–æ–π –¥–æ–±—ã—á–µ –∏–ª–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –≥–∞–∑–∞! üòä"
        })

    if "waiting_for_report_selection" not in st.session_state:
        st.session_state.waiting_for_report_selection = False
        st.session_state.current_state = None
        st.session_state.current_graph = None
        st.session_state.process_selection = False
        st.session_state.selected_reports = []


def strip_latex_from_text(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç LaTeX —Ä–∞–∑–º–µ—Ç–∫–∏"""
    # \text{...} ‚Üí –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    text = re.sub(r'\\text\{([^}]+)\}', r'\1', text)

    # \times 10^{...} ‚Üí √ó 10‚Åø
    text = re.sub(r'\\times\s*10\^{(-?\d+)}', lambda m: f"√ó 10{_superscript(m.group(1))}", text)

    # \times –±–µ–∑ —Å—Ç–µ–ø–µ–Ω–∏ ‚Üí –ø—Ä–æ—Å—Ç–æ √ó
    text = re.sub(r'\\times', '√ó', text)

    # 10^{...} ‚Üí 10‚Åø
    text = re.sub(r'10\^\{(-?\d+)\}', lambda m: f"10{_superscript(m.group(1))}", text)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–¥–∏–Ω–∏—Ü—ã: –º^2, —Å–º^3 ‚Üí –º¬≤, —Å–º¬≥
    text = re.sub(r'([–º–úm—Å–°])\^2', r'\1¬≤', text)
    text = re.sub(r'([–º–úm—Å–°])\^3', r'\1¬≥', text)

    # –£–±–∏—Ä–∞–µ–º \( ... \)
    text = re.sub(r'\\\((.*?)\\\)', r'\1', text)

    # –ó–∞–º–µ–Ω–∞ \mu –∏ –ø—Ä–æ—á–µ–≥–æ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'\\(mu|phi|Delta|alpha|beta|lambda|sigma|gamma|theta|rho)',
                  lambda m: GREEK_LETTER_MAP.get(m.group(1), m.group(0)), text)

    return text


def _superscript(digits: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ü–∏—Ñ—Ä—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π –∏–Ω–¥–µ–∫—Å"""
    return digits.translate(SUPERSCRIPT_MAP)


def render_response_with_latex(response_text: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
    - –§–æ—Ä–º—É–ª –≤ $$...$$
    - –§–æ—Ä–º—É–ª –≤ \begin{align}...\end{align}
    - –û—á–∏—Å—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞ –æ—Ç –º—É—Å–æ—Ä–∞ LaTeX
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
    block_pattern = r'\$\$([^$]+?)\$\$'
    align_pattern = r'\\begin\{align\}(.*?)\\end\{align\}'

    matches = []

    for m in re.finditer(block_pattern, response_text, re.DOTALL):
        matches.append({
            'start': m.start(),
            'end': m.end(),
            'content': m.group(1).strip(),
            'type': 'latex'
        })

    for m in re.finditer(align_pattern, response_text, re.DOTALL):
        matches.append({
            'start': m.start(),
            'end': m.end(),
            'content': f"\\begin{{align}}\n{m.group(1).strip()}\n\\end{{align}}",
            'type': 'align'
        })

    matches.sort(key=lambda m: m['start'])

    last = 0
    for m in matches:
        # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –¥–æ —Ñ–æ—Ä–º—É–ª—ã (–æ—á–∏—â–µ–Ω–Ω—ã–π)
        if m['start'] > last:
            text_chunk = response_text[last:m['start']]
            cleaned = strip_latex_from_text(text_chunk).strip()
            if cleaned:
                st.markdown(cleaned)

        # –§–æ—Ä–º—É–ª–∞
        try:
            st.latex(m['content'])
        except Exception:
            st.code(f"[LaTeX –æ—à–∏–±–∫–∞] {m['content']}")

        last = m['end']

    # –í—ã–≤–æ–¥–∏–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if last < len(response_text):
        remaining = strip_latex_from_text(response_text[last:]).strip()
        if remaining:
            st.markdown(remaining)


def format_message_content(message_content: str, message_type: str = "text") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
    if message_type == "code":
        return f"```python\n{message_content}\n```"
    elif message_type == "error":
        return f"‚ùå **–û—à–∏–±–∫–∞:** {message_content}"
    elif message_type == "success":
        return f"‚úÖ **–£—Å–ø–µ—Ö:** {message_content}"
    elif message_type == "info":
        return f"‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** {message_content}"
    elif message_type == "warning":
        return f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:** {message_content}"
    else:
        return message_content


def create_status_indicator(status: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞"""
    status_icons = {
        "processing": "üîÑ",
        "completed": "‚úÖ",
        "error": "‚ùå",
        "waiting": "‚è≥",
        "queued": "üìã"
    }

    status_colors = {
        "processing": "#1f77b4",
        "completed": "#2ca02c",
        "error": "#d62728",
        "waiting": "#ff7f0e",
        "queued": "#9467bd"
    }

    icon = status_icons.get(status, "‚ö™")
    color = status_colors.get(status, "#666666")

    return f'<span style="color: {color}">{icon} {status.title()}</span>'


def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes == 0:
        return "0 B"

    size_names = ["B", "KB", "MB", "GB", "TB"]
    import math
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return f"{s} {size_names[i]}"


def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length - len(suffix)] + suffix


def validate_user_input(user_input: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥"""
    if not user_input or not user_input.strip():
        return False, "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"

    if len(user_input.strip()) < 3:
        return False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)"

    if len(user_input) > 1000:
        return False, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    dangerous_patterns = [
        r'<script.*?>',
        r'javascript:',
        r'eval\s*\(',
        r'exec\s*\('
    ]

    for pattern in dangerous_patterns:
        if re.search(pattern, user_input, re.IGNORECASE):
            return False, "–ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"

    return True, "OK"


def create_progress_indicator(current: int, total: int, prefix: str = "") -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    if total == 0:
        return f"{prefix} ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ..."

    percentage = int((current / total) * 100)
    filled_length = int((current / total) * 20)  # 20 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–ª–æ—Å—ã

    bar = "‚ñà" * filled_length + "‚ñë" * (20 - filled_length)

    return f"{prefix} {bar} {percentage}% ({current}/{total})"


def format_duration(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 1:
        return f"{int(seconds * 1000)}–º—Å"
    elif seconds < 60:
        return f"{seconds:.1f}—Å"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes}–º {secs}—Å"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours}—á {minutes}–º"


def create_expandable_section(title: str, content: str, expanded: bool = False) -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â—É—é—Å—è —Å–µ–∫—Ü–∏—é"""
    with st.expander(title, expanded=expanded):
        st.write(content)


def display_dataframe_summary(df, title: str = "–î–∞–Ω–Ω—ã–µ"):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ DataFrame"""
    if df is None or df.empty:
        st.warning(f"{title}: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("–°—Ç—Ä–æ–∫", len(df))

    with col2:
        st.metric("–°—Ç–æ–ª–±—Ü–æ–≤", len(df.columns))

    with col3:
        memory_usage = df.memory_usage(deep=True).sum()
        st.metric("–†–∞–∑–º–µ—Ä", format_file_size(memory_usage))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    with st.expander(f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ {title}", expanded=False):
        st.write("**–°—Ç–æ–ª–±—Ü—ã –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**")
        for col, dtype in df.dtypes.items():
            st.write(f"- `{col}`: {dtype}")


def create_download_button(data, filename: str, button_text: str = "–°–∫–∞—á–∞—Ç—å"):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    if isinstance(data, str):
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        st.download_button(
            label=button_text,
            data=data,
            file_name=filename,
            mime="text/plain"
        )
    else:
        # DataFrame –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
        if hasattr(data, 'to_csv'):
            csv_data = data.to_csv(index=False)
            st.download_button(
                label=button_text,
                data=csv_data,
                file_name=filename,
                mime="text/csv"
            )


def show_processing_spinner(message: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏–Ω–Ω–µ—Ä —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    return st.spinner(message)


def display_error_message(error: str, details: str = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    st.error(f"‚ùå {error}")

    if details:
        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"):
            st.code(details)


def display_success_message(message: str, details: str = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    st.success(f"‚úÖ {message}")

    if details:
        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"):
            st.info(details)


def create_info_box(title: str, content: str, box_type: str = "info"):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫"""
    icons = {
        "info": "‚ÑπÔ∏è",
        "warning": "‚ö†Ô∏è",
        "error": "‚ùå",
        "success": "‚úÖ"
    }

    icon = icons.get(box_type, "‚ÑπÔ∏è")

    st.markdown(f"""
    <div style="
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #f8f9fa;
        border-left: 4px solid #007bff;
        margin: 1rem 0;
    ">
        <h4 style="margin: 0 0 0.5rem 0;">{icon} {title}</h4>
        <p style="margin: 0;">{content}</p>
    </div>
    """, unsafe_allow_html=True)


def format_timestamp(timestamp) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É"""
    if hasattr(timestamp, 'strftime'):
        return timestamp.strftime("%d.%m.%Y %H:%M:%S")
    return str(timestamp)


def create_sidebar_info():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    with st.sidebar:
        st.markdown("### üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")

        st.markdown("""
        **OIS-GPT** - —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–æ–π –æ—Ç—Ä–∞—Å–ª–∏

        **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
        - üìã –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–æ–≤ —Ä–∞–±–æ—Ç—ã
        - üîß –û—Ç—á–µ—Ç—ã –ø–æ –±—É—Ä–µ–Ω–∏—é
        - ‚ö° –ó–∞–º–µ—Ä–Ω–∞—è –¥–æ–±—ã—á–∞
        - üî• –£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≥–∞–∑–∞
        - üìö –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        """)

        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.messages = []
            st.session_state.messages.append({
                "role": "assistant",
                "content": "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ó–∞–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"
            })
            st.rerun()


def highlight_keywords(text: str, keywords: list) -> str:
    """–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ"""
    for keyword in keywords:
        pattern = re.compile(re.escape(keyword), re.IGNORECASE)
        text = pattern.sub(f"**{keyword}**", text)
    return text


def create_metric_card(title: str, value: str, delta: str = None, delta_color: str = "normal"):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –º–µ—Ç—Ä–∏–∫–æ–π"""
    st.metric(
        label=title,
        value=value,
        delta=delta,
        delta_color=delta_color
    )


def format_large_number(number: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if number >= 1_000_000:
        return f"{number / 1_000_000:.1f}–ú"
    elif number >= 1_000:
        return f"{number / 1_000:.1f}–ö"
    else:
        return f"{number:.1f}"


def create_tooltip(text: str, tooltip: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    return f'<span title="{tooltip}">{text}</span>'


def validate_file_upload(uploaded_file, allowed_types: list = None, max_size_mb: int = 50):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    if uploaded_file is None:
        return False, "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if allowed_types and uploaded_file.type not in allowed_types:
        return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(allowed_types)}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if uploaded_file.size > max_size_mb * 1024 * 1024:
        return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size_mb}MB"

    return True, "OK"


def create_column_selector(df, title: str = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã"):
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ DataFrame"""
    if df is None or df.empty:
        st.warning("–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return []

    return st.multiselect(
        title,
        options=df.columns.tolist(),
        default=df.columns.tolist()[:3]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–µ 3 —Å—Ç–æ–ª–±—Ü–∞
    )