"""–û—Å–Ω–æ–≤–Ω–æ–µ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
import streamlit as st
import uuid
from config import config
from src.services import AIService, DataService, SearchService
from src.graph import create_workflow
from src.ui.components import (
    render_header, render_chat_history, render_report_selector,
    display_result, cleanup_old_plots
)
from src.ui.utils import initialize_session_state


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title=config.PAGE_TITLE,
        page_icon=config.PAGE_ICON,
        layout=config.LAYOUT
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    render_header()

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
    cleanup_old_plots(max_files=config.MAX_PLOT_FILES)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    initialize_session_state()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if "model_loaded" not in st.session_state:
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –ò–ò..."):
            ai_service = AIService()
            ai_service.get_pipe()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            st.session_state.model_loaded = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch
    if "es_connection_checked" not in st.session_state:
        with st.spinner("–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."):
            search_service = SearchService()
            search_service.get_client()
            st.session_state.es_connection_checked = True

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if "data_loaded" not in st.session_state:
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            data_service = DataService()
            df, message = data_service.load_work_plan_data()
            st.session_state.data_loaded = True
            st.success(message)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    render_chat_history()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞ –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è
    if st.session_state.waiting_for_report_selection and st.session_state.current_state:
        render_report_selector()
        return

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    prompt = st.chat_input(
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–æ–π –æ—Ç—Ä–∞—Å–ª–∏...",
        disabled=st.session_state.waiting_for_report_selection
    )

    if prompt and not st.session_state.waiting_for_report_selection:
        handle_user_input(prompt)


def handle_user_input(prompt: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.session_state.messages.append({"role": "user", "content": prompt})

    with st.chat_message("user"):
        st.markdown(prompt)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    with st.chat_message("assistant"):
        with st.spinner("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..."):
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ –∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            graph = create_workflow()

            initial_state = {
                "user_input": prompt,
                "route_decision": "",
                "response": "",
                "summary_type": "",
                "analysis_code": "",
                "analysis_result": "",
                "plot_path": "",
                "report_options": [],
                "selected_report": "",
                "waiting_for_selection": False,
                "generated_data": {}
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            from src.services import AIService, SearchService
            ai_service = AIService()
            search_service = SearchService()

            from src.graph.nodes import RouterNode
            router_node = RouterNode(ai_service, search_service)
            router_result = router_node(initial_state)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—É—Ç–∏–Ω–≥–∞
            process_router_result(router_result, graph, initial_state)


def process_router_result(router_result, graph, initial_state):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—É—Ç–∏–Ω–≥–∞"""
    if router_result.get("route_decision") == "general":
        st.info("üí≠ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å")
        final_state = graph.invoke(initial_state)
        display_result(final_state)

    elif router_result.get("route_decision") == "documentation":
        st.info("üìö –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –ò—â—É –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
        final_state = graph.invoke(initial_state)
        display_result(final_state)

    elif router_result.get("waiting_for_selection", False) and router_result.get("report_options"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö
        if router_result.get("route_decision") == "elasticsearch_based":
            st.info("üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–æ–≤. –ù–∞–π–¥–µ–Ω—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.")
        else:
            st.info("üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
        st.session_state.waiting_for_report_selection = True
        st.session_state.current_state = router_result
        st.session_state.current_graph = graph

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ
        if router_result.get("route_decision") == "elasticsearch_based":
            st.markdown("–Ø –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ:")
        else:
            st.markdown("–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–∞–∑–µ, –Ω–æ –≤–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ:")

        st.rerun()
    else:
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –≥—Ä–∞—Ñ
        final_state = graph.invoke(initial_state)
        display_result(final_state)


if __name__ == "__main__":
    main()