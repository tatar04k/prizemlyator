"""–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –∑–∞–ø—Ä–æ—Å–æ–≤"""
import queue
import threading
import time
import uuid
from datetime import datetime
from typing import Dict, Tuple, Any, Optional
from src.models import QueueItem


class QueueService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def __init__(self):
        self.queue = queue.Queue()
        self.processing_status = {}
        self.current_processing = None
        self.worker_thread = None
        self.is_processing = False

    def add_to_queue(self, session_id: str, request_data: Dict[str, Any]) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å"""
        request_id = str(uuid.uuid4())[:8]
        queue_item = QueueItem(
            request_id=request_id,
            session_id=session_id,
            timestamp=datetime.now(),
            request_data=request_data,
            status='waiting'
        )

        self.queue.put(queue_item.__dict__)
        self.processing_status[request_id] = queue_item.__dict__

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if not self.is_processing:
            self.start_worker()

        return request_id

    def get_queue_position(self, request_id: str) -> Tuple[int, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏"""
        if request_id not in self.processing_status:
            return -1, "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        status = self.processing_status[request_id]
        if status['status'] == 'processing':
            return 0, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
        elif status['status'] == 'completed':
            return -1, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        elif status['status'] == 'error':
            return -1, "–û—à–∏–±–∫–∞"

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
        position = 0
        queue_list = list(self.queue.queue)

        for i, item in enumerate(queue_list):
            if item['request_id'] == request_id:
                position = i + 1
                break

        return position, f"–í –æ—á–µ—Ä–µ–¥–∏ (–ø–æ–∑–∏—Ü–∏—è {position})"

    def start_worker(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏"""
        if self.worker_thread is None or not self.worker_thread.is_alive():
            self.is_processing = True
            self.worker_thread = threading.Thread(target=self._process_queue, daemon=True)
            self.worker_thread.start()

    def _process_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
                queue_item = self.queue.get(timeout=30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥

                self.current_processing = queue_item['request_id']
                self.processing_status[queue_item['request_id']]['status'] = 'processing'

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                result = self._execute_request(queue_item)

                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                self.processing_status[queue_item['request_id']]['status'] = 'completed'
                self.processing_status[queue_item['request_id']]['result'] = result
                self.current_processing = None

                self.queue.task_done()

            except queue.Empty:
                # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                self.is_processing = False
                break
            except Exception as e:
                # –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if 'queue_item' in locals():
                    self.processing_status[queue_item['request_id']]['status'] = 'error'
                    self.processing_status[queue_item['request_id']]['error'] = str(e)
                    self.current_processing = None

    def _execute_request(self, queue_item: Dict[str, Any]) -> Any:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from src.services.ai_service import AIService
        from src.graph.nodes import CodeGeneratorNode

        request_data = queue_item['request_data']
        request_type = request_data['type']

        ai_service = AIService()
        code_generator = CodeGeneratorNode(ai_service)

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        if request_type == 'generate_work_plan_code':
            return code_generator.generate_work_plan_code(
                request_data['query'],
                request_data['df_info'],
                request_data.get('selected_option')
            )
        elif request_type == 'generate_drilling_code':
            return code_generator.generate_drilling_code(
                request_data['query'],
                request_data.get('selected_option')
            )
        elif request_type == 'generate_measurement_code':
            return code_generator.generate_measurement_code(
                request_data['query'],
                request_data.get('selected_option')
            )
        elif request_type == 'generate_gas_utilization_code':
            return code_generator.generate_gas_utilization_code(
                request_data['query'],
                request_data.get('selected_option')
            )
        elif request_type == 'generate_final_response':
            return code_generator.generate_final_response(request_data['state'])
        elif request_type == 'generate_documentation_response':
            return ai_service.generate_documentation_response(
                request_data['query'],
                request_data['doc_results']
            )
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {request_type}")

    def get_result(self, request_id: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if request_id in self.processing_status:
            status = self.processing_status[request_id]
            if status['status'] == 'completed':
                return status.get('result')
            elif status['status'] == 'error':
                raise Exception(status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
queue_service = QueueService()


def queue_aware_generation(session_id: str, request_type: str, request_data: Dict[str, Any]) -> Any:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞"""
    import streamlit as st

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    request_id = queue_service.add_to_queue(session_id, {
        'type': request_type,
        **request_data
    })

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
    status_placeholder = st.empty()
    progress_bar = st.progress(0)

    # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_time = time.time()
    while True:
        position, status_text = queue_service.get_queue_position(request_id)

        if position == -1:
            if "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" in status_text:
                status_placeholder.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                progress_bar.progress(100)
                result = queue_service.get_result(request_id)
                break
            elif "–û—à–∏–±–∫–∞" in status_text:
                status_placeholder.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                break
            else:
                status_placeholder.info(status_text)
                break
        elif position == 0:
            elapsed = int(time.time() - start_time)
            status_placeholder.info(f"üîÑ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... ({elapsed}—Å)")
            progress_bar.progress(75)
        else:
            status_placeholder.info(f"‚è≥ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position}")
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏
            progress = max(5, min(50, (10 - position) * 10))
            progress_bar.progress(progress)

        time.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

    # –û—á–∏—â–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    status_placeholder.empty()
    progress_bar.empty()

    return result