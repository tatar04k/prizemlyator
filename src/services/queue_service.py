"""–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –∑–∞–ø—Ä–æ—Å–æ–≤"""
import queue
import threading
import time
import uuid
from datetime import datetime
from typing import Dict, Tuple, Any, Optional
from src.models import QueueItem


class QueueService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""

    def __init__(self):
        self.queue = queue.Queue()
        self.processing_status = {}
        self.current_processing = None
        self.worker_thread = None
        self.is_processing = False

    def add_to_queue(self, session_id: str, request_data: Dict[str, Any]) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏.
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            session_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            request_data (dict): –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–∏–ø –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã).
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞.
        """
        request_id = str(uuid.uuid4())[:8]
        queue_item = QueueItem(
            request_id=request_id,
            session_id=session_id,
            timestamp=datetime.now(),
            request_data=request_data,
            status='waiting'
        )

        self.queue.put(queue_item.__dict__)
        self.processing_status[request_id] = queue_item.__dict__

        if not self.is_processing:
            self.start_worker()

        return request_id

    def get_queue_position(self, request_id: str) -> Tuple[int, str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å.
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            request_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Tuple[int, str]: (–ø–æ–∑–∏—Ü–∏—è, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞)
        """
        if request_id not in self.processing_status:
            return -1, "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        status = self.processing_status[request_id]
        if status['status'] == 'processing':
            return 0, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
        elif status['status'] == 'completed':
            return -1, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        elif status['status'] == 'error':
            return -1, "–û—à–∏–±–∫–∞"

        position = 0
        queue_list = list(self.queue.queue)

        for i, item in enumerate(queue_list):
            if item['request_id'] == request_id:
                position = i + 1
                break

        return position, f"–í –æ—á–µ—Ä–µ–¥–∏ (–ø–æ–∑–∏—Ü–∏—è {position})"

    def start_worker(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω."""
        if self.worker_thread is None or not self.worker_thread.is_alive():
            self.is_processing = True
            self.worker_thread = threading.Thread(target=self._process_queue, daemon=True)
            self.worker_thread.start()

    def _process_queue(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.
        
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ processing/completed/error –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
        """
        while True:
            try:
                queue_item = self.queue.get(timeout=30) 

                self.current_processing = queue_item['request_id']
                self.processing_status[queue_item['request_id']]['status'] = 'processing'

                result = self._execute_request(queue_item)

                self.processing_status[queue_item['request_id']]['status'] = 'completed'
                self.processing_status[queue_item['request_id']]['result'] = result
                self.current_processing = None

                self.queue.task_done()

            except queue.Empty:
                self.is_processing = False
                break
            except Exception as e:
                if 'queue_item' in locals():
                    self.processing_status[queue_item['request_id']]['status'] = 'error'
                    self.processing_status[queue_item['request_id']]['error'] = str(e)
                    self.current_processing = None

    def _execute_request(self, queue_item: Dict[str, Any]) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞, –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            queue_item (dict): –û–±—ä–µ–∫—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
        """
        from src.services.ai_service import AIService
        from src.graph.nodes import CodeGeneratorNode

        request_data = queue_item['request_data']
        request_type = request_data['type']

        ai_service = AIService()
        code_generator = CodeGeneratorNode(ai_service)

        if request_type == 'generate_work_plan_code':
            return code_generator.generate_work_plan_code(
                request_data['query'],
                request_data['df_info'],
                request_data.get('selected_option')
            )
        elif request_type == 'generate_drilling_code':
            return code_generator.generate_drilling_code(
                request_data['query'],
                request_data.get('selected_option')
            )
        elif request_type == 'generate_measurement_code':
            return code_generator.generate_measurement_code(
                request_data['query'],
                request_data.get('selected_option')
            )
        elif request_type == 'generate_gas_utilization_code':
            return code_generator.generate_gas_utilization_code(
                request_data['query'],
                request_data.get('selected_option')
            )
        elif request_type == 'generate_final_response':
            return code_generator.generate_final_response(request_data['state'])
        elif request_type == 'generate_documentation_response':
            return ai_service.generate_documentation_response(
                request_data['query'],
                request_data['doc_results']
            )
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {request_type}")

    def get_result(self, request_id: str) -> Optional[Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω.
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            request_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –õ—é–±–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–±—ã—á–Ω–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥), –ª–∏–±–æ None, –µ—Å–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤.
        """

        if request_id in self.processing_status:
            status = self.processing_status[request_id]
            if status['status'] == 'completed':
                return status.get('result')
            elif status['status'] == 'error':
                raise Exception(status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        return None


queue_service = QueueService()


def queue_aware_generation(session_id: str, request_type: str, request_data: Dict[str, Any]) -> Any:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –æ—á–µ—Ä–µ–¥–∏. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ Streamlit.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        session_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏.
        request_type (str): –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥–∞–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'generate_work_plan_code').
        request_data (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (query, df_info –∏ —Ç.–¥.).
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç).
    """
    import streamlit as st

    request_id = queue_service.add_to_queue(session_id, {
        'type': request_type,
        **request_data
    })

    status_placeholder = st.empty()
    progress_bar = st.progress(0)

    start_time = time.time()
    while True:
        position, status_text = queue_service.get_queue_position(request_id)

        if position == -1:
            if "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" in status_text:
                status_placeholder.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                progress_bar.progress(100)
                result = queue_service.get_result(request_id)
                break
            elif "–û—à–∏–±–∫–∞" in status_text:
                status_placeholder.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                break
            else:
                status_placeholder.info(status_text)
                break
        elif position == 0:
            elapsed = int(time.time() - start_time)
            status_placeholder.info(f"üîÑ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... ({elapsed}—Å)")
            progress_bar.progress(75)
        else:
            status_placeholder.info(f"‚è≥ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position}")
            progress = max(5, min(50, (10 - position) * 10))
            progress_bar.progress(progress)

        time.sleep(1)  

    status_placeholder.empty()
    progress_bar.empty()

    return result